# Fast Offline Build Dockerfile for Backend
# Assumes dependencies are already cached

FROM eclipse-temurin:17-jdk-alpine AS builder

# Build arguments for CORS configuration
ARG CORS_ALLOWED_ORIGINS=http://localhost:4200,http://localhost:3000,http://192.168.0.103:3000
ARG CORS_ALLOWED_METHODS=GET,POST,PUT,PATCH,DELETE,OPTIONS
ARG CORS_ALLOWED_HEADERS=*
ARG CORS_ALLOW_CREDENTIALS=true

WORKDIR /app

# Copy everything including .gradle cache if available
COPY . .
RUN chmod +x ./gradlew

# Build with offline mode (faster if dependencies are cached)
RUN ./gradlew bootJar --offline --no-daemon --stacktrace || \
    ./gradlew bootJar --no-daemon --stacktrace

# Stage 2: Runtime
FROM eclipse-temurin:17-jre-alpine AS runtime

# Pass build arguments as environment variables
ARG CORS_ALLOWED_ORIGINS=http://localhost:4200,http://localhost:3000,http://192.168.0.103:3000
ARG CORS_ALLOWED_METHODS=GET,POST,PUT,PATCH,DELETE,OPTIONS
ARG CORS_ALLOWED_HEADERS=*
ARG CORS_ALLOW_CREDENTIALS=true

ENV CORS_ALLOWED_ORIGINS=$CORS_ALLOWED_ORIGINS
ENV CORS_ALLOWED_METHODS=$CORS_ALLOWED_METHODS
ENV CORS_ALLOWED_HEADERS=$CORS_ALLOWED_HEADERS
ENV CORS_ALLOW_CREDENTIALS=$CORS_ALLOW_CREDENTIALS

# JVM options with sensible defaults; can be overridden at runtime
ENV JAVA_TOOL_OPTIONS="-XX:ReservedCodeCacheSize=256m -XX:InitialCodeCacheSize=128m"

# Install PostgreSQL client
RUN apk add --no-cache postgresql-client

WORKDIR /app

# Copy the built JAR
COPY --from=builder /app/build/libs/*.jar app.jar

# Create non-root user
RUN addgroup -g 1001 appgroup && \
    adduser -D -s /bin/sh -u 1001 -G appgroup appuser

USER appuser

EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/actuator/health || exit 1

CMD ["sh", "-c", "java $JAVA_TOOL_OPTIONS -jar app.jar"]
